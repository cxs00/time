//
//  TimeWebView.swift
//  TIME
//
//  TIME 应用 WebView 封装
//

import SwiftUI
import WebKit

#if os(iOS)
struct TimeWebView: UIViewRepresentable {
    func makeUIView(context: Context) -> WKWebView {
        // 创建配置 - iOS专用优化
        let configuration = WKWebViewConfiguration()

        // 🔧 关键修复：使用现代API配置JavaScript权限
        let preferences = WKWebpagePreferences()
        preferences.allowsContentJavaScript = true
        configuration.defaultWebpagePreferences = preferences

        // 允许本地文件访问（iOS关键配置）
        configuration.setValue(true, forKey: "allowUniversalAccessFromFileURLs")
        configuration.preferences.setValue(true, forKey: "allowFileAccessFromFileURLs")

        // 允许内联媒体播放
        configuration.allowsInlineMediaPlayback = true
        configuration.mediaTypesRequiringUserActionForPlayback = []

        // 清理缓存，避免旧版本资源造成黑屏/旧界面
        let dataStore = WKWebsiteDataStore.default()
        let types: Set<String> = [WKWebsiteDataTypeDiskCache, WKWebsiteDataTypeMemoryCache]
        dataStore.removeData(ofTypes: types, modifiedSince: Date(timeIntervalSince1970: 0)) {
            print("🧹 iOS: 已清理WKWebView缓存")
        }

        // 创建WebView
        let webView = WKWebView(frame: .zero, configuration: configuration)
        webView.scrollView.isScrollEnabled = true
        webView.scrollView.bounces = true

        // 启用开发者工具便于调试
        if #available(iOS 16.4, *) {
            webView.isInspectable = true
        }

        // 🔧 关键修复：使用内联化方案解决 iOS 同源策略问题
        if let urlInWeb = Bundle.main.url(forResource: "activity-tracker", withExtension: "html", subdirectory: "Web") {
            let webDirectory = urlInWeb.deletingLastPathComponent()

            // 读取 HTML 并内联所有本地资源
            if var html = try? String(contentsOf: urlInWeb) {
                print("📱 iOS 内联化处理开始...")

                // 1. 内联本地 JS 文件（不包含 adsense.js - AdSense 政策要求）
                let jsFiles = ["storage.js", "notification.js", "ai-classifier.js",
                              "activity-tracker.js", "project-manager.js",
                              "diary-memo.js", "statistics.js", "advanced-charts.js",
                              "app-main.js", "pwa-register.js"]

                var inlinedCount = 0
                for jsFile in jsFiles {
                    let jsURL = webDirectory.appendingPathComponent("js").appendingPathComponent(jsFile)
                    if let jsContent = try? String(contentsOf: jsURL) {
                        html = html.replacingOccurrences(
                            of: "<script src=\"\(jsFile)\"></script>",
                            with: "<script>/* \(jsFile) */\n\(jsContent)\n</script>"
                        )
                        inlinedCount += 1
                        print("  ✅ 内联: \(jsFile)")
                    }
                }

                // 2. 内联 CSS
                let cssURL = webDirectory.appendingPathComponent("css").appendingPathComponent("activity-tracker.css")
                if let cssContent = try? String(contentsOf: cssURL) {
                    html = html.replacingOccurrences(
                        of: "<link rel=\"stylesheet\" href=\"activity-tracker.css\">",
                        with: "<style>/* activity-tracker.css */\n\(cssContent)\n</style>"
                    )
                    print("  ✅ 内联: activity-tracker.css")
                }

                // 3. 添加加载指示器
                let loadingIndicator = """
                <div id="app-loading" style="position:fixed;top:0;left:0;right:0;bottom:0;
                     background:linear-gradient(135deg,#667eea,#764ba2);z-index:99999;
                     display:flex;align-items:center;justify-content:center;">
                    <div style="text-align:center;color:white;">
                        <h1 style="font-size:48px;margin-bottom:20px;">⏳</h1>
                        <h2>Activity Tracker</h2>
                        <p style="opacity:0.8;">正在加载...</p>
                    </div>
                </div>
                <script>
                    window.addEventListener('load', function() {
                        setTimeout(function() {
                            var loading = document.getElementById('app-loading');
                            if (loading) loading.remove();
                        }, 300);
                    });
                </script>
                """
                html = html.replacingOccurrences(
                    of: "<body>",
                    with: "<body>\(loadingIndicator)"
                )

                print("📱 内联化完成:")
                print("  - JS 文件: \(inlinedCount) 个")
                print("  - HTML 大小: \(html.count) bytes")
                print("  - 加载方式: loadHTMLString")

                // 4. 使用 loadHTMLString（关键！）
                webView.loadHTMLString(html, baseURL: webDirectory)

                // 5. 验证 JavaScript 执行
                DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                    webView.evaluateJavaScript("typeof window.AppMain") { result, error in
                        if let result = result as? String, result == "undefined" {
                            print("❌ JavaScript 未正常执行")
                        } else {
                            print("✅ JavaScript 执行正常")
                        }
                    }
                }
            } else {
                // 降级：直接加载文件
                print("⚠️ 无法读取 HTML，使用降级方案")
                webView.loadFileURL(urlInWeb, allowingReadAccessTo: webDirectory)
            }
        } else if let htmlPath = Bundle.main.path(forResource: "activity-tracker", ofType: "html") {
            // 兜底：从根目录加载
            let fileURL = URL(fileURLWithPath: htmlPath)
            let webDirectory = fileURL.deletingLastPathComponent()
            print("⚠️ 使用根目录加载（兜底方案）")
            webView.loadFileURL(fileURL, allowingReadAccessTo: webDirectory)
        } else {
            print("❌ 未找到activity-tracker.html文件")
            // 显示简单的错误页面
            let errorHTML = """
            <!DOCTYPE html>
            <html>
            <head>
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        min-height: 100vh;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        text-align: center;
                        padding: 20px;
                    }
                    .container { max-width: 400px; }
                    h1 { font-size: 48px; margin-bottom: 20px; }
                    h2 { font-size: 24px; margin-bottom: 15px; font-weight: 600; }
                    p { font-size: 14px; line-height: 1.6; opacity: 0.9; margin-bottom: 10px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>⚠️</h1>
                    <h2>资源加载失败</h2>
                    <p>Web资源文件未找到</p>
                    <p>请在Xcode中确认Web文件夹资源已正确添加到项目</p>
                </div>
            </body>
            </html>
            """
            webView.loadHTMLString(errorHTML, baseURL: nil)
        }

        return webView
    }

    func updateUIView(_ uiView: WKWebView, context: Context) {
    }
}
#elseif os(macOS)
struct TimeWebView: NSViewRepresentable {
    func makeNSView(context: Context) -> WKWebView {
        // 创建配置 - macOS专用优化
        let configuration = WKWebViewConfiguration()

        // 配置preferences
        let preferences = WKWebpagePreferences()
        preferences.allowsContentJavaScript = true
        configuration.defaultWebpagePreferences = preferences

        // 允许本地文件访问（macOS关键配置）
        configuration.setValue(true, forKey: "allowUniversalAccessFromFileURLs")
        configuration.preferences.setValue(true, forKey: "allowFileAccessFromFileURLs")

        // 创建WebView
        let webView = WKWebView(frame: .zero, configuration: configuration)

        // 清理缓存，避免旧版本资源造成黑屏/旧界面
        let dataStore = WKWebsiteDataStore.default()
        let types: Set<String> = [WKWebsiteDataTypeDiskCache, WKWebsiteDataTypeMemoryCache]
        dataStore.removeData(ofTypes: types, modifiedSince: Date(timeIntervalSince1970: 0)) {
            print("🧹 macOS: 已清理WKWebView缓存")
        }

        // macOS Resources目录在Contents/Resources/Web下（加载Activity Tracker）
        if let htmlURL = Bundle.main.url(forResource: "activity-tracker",
                                         withExtension: "html",
                                         subdirectory: "Web") {
            // 🔧 关键修复：正确设置访问权限
            let webDir = htmlURL.deletingLastPathComponent()  // Contents/Resources/Web/
            let resourcesDir = webDir.deletingLastPathComponent()  // Contents/Resources/

            print("🖥️ macOS - 从Web子目录加载")
            print("   HTML路径: \(htmlURL.path)")
            print("   Web目录: \(webDir.path)")
            print("   访问权限根目录: \(resourcesDir.path)")

            // ✅ 允许访问整个 Resources 目录（包含 Web/js/, Web/css/ 等子目录）
            webView.loadFileURL(htmlURL, allowingReadAccessTo: resourcesDir)
            webView.configuration.preferences.setValue(true, forKey: "developerExtrasEnabled")
            webView.setValue(false, forKey: "drawsBackground")

            // 验证 JavaScript 执行
            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                webView.evaluateJavaScript("typeof window.AppMain") { result, error in
                    if let result = result as? String {
                        if result == "undefined" {
                            print("❌ macOS: JavaScript 未正常执行")
                        } else {
                            print("✅ macOS: JavaScript 执行正常，AppMain 类型: \(result)")
                        }
                    } else if let error = error {
                        print("⚠️ macOS: JavaScript 检查失败: \(error.localizedDescription)")
                    }
                }
            }
        } else {
            print("❌ macOS: 未找到 Web/activity-tracker.html 文件")

            // 显示友好的错误页面
            let errorHTML = """
            <!DOCTYPE html>
            <html>
            <head>
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', sans-serif;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        min-height: 100vh;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        text-align: center;
                        padding: 40px;
                    }
                    .container { max-width: 500px; }
                    h1 { font-size: 64px; margin-bottom: 20px; }
                    h2 { font-size: 28px; margin-bottom: 20px; font-weight: 600; }
                    p { font-size: 16px; line-height: 1.8; opacity: 0.95; margin-bottom: 12px; }
                    .code {
                        background: rgba(0,0,0,0.2);
                        padding: 15px;
                        border-radius: 8px;
                        font-family: 'SF Mono', Monaco, monospace;
                        font-size: 14px;
                        margin-top: 20px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>⚠️</h1>
                    <h2>资源加载失败</h2>
                    <p>Web资源文件未找到</p>
                    <p>请在Xcode中确认Web文件夹已正确添加到项目</p>
                    <div class="code">
                        检查: Web资源 → Target Membership → ✓ time
                    </div>
                </div>
            </body>
            </html>
            """
            webView.loadHTMLString(errorHTML, baseURL: nil)
        }

        return webView
    }

    func updateNSView(_ nsView: WKWebView, context: Context) {
    }
}
#endif

#Preview {
    TimeWebView()
}
