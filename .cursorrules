# Cursor AI 助手配置 - Activity Tracker 项目

## 项目类型
这是一个智能活动记录与进度管理系统，包含Web版本和原生iOS/macOS应用。

## 技术栈
- 前端：HTML5, CSS3, JavaScript ES6+
- 原生：SwiftUI (iOS/macOS)
- 数据：LocalStorage, ECharts
- 工具：Git, Xcode, Cursor

## 🚀 自动化工作流程

### 自动仿真规则 - MUST FOLLOW
**每次Cursor完成代码修改后，必须自动运行仿真验证**

```bash
# 标准流程：
1. 完成代码修改
2. 等待10秒（确保文件保存完成）
3. 自动运行Mac和iPhone仿真
4. 显示验证清单

# 执行命令：
sleep 10 && cd /Users/shanwanjun/Desktop/cxs/time/time && echo "3" | ./run-simulation.sh
```

**例外情况（不运行仿真）：**
- 仅修改文档文件（*.md）
- 仅修改配置文件（.cursorrules, .gitignore等）
- 用户明确说明"不要运行仿真"
- 仅进行Git操作（commit, tag等）

**仿真验证要点：**
- 检查编译是否成功
- 检查应用是否正常启动
- 检查控制台是否有错误
- 提醒用户验证修改的功能

## 🚨 关键开发规范（避免错误）

### 1. 数据存储规范 - MUST FOLLOW
```javascript
// ✅ 正确：统一使用前缀键名
const STORAGE_KEYS = {
  ACTIVITIES: 'activityTracker_activities',
  PROJECTS: 'activityTracker_projects',
  DIARY: 'activityTracker_diary',
  MEMOS: 'activityTracker_memos'
};
localStorage.setItem(STORAGE_KEYS.PROJECTS, JSON.stringify(projects));
const projects = JSON.parse(localStorage.getItem(STORAGE_KEYS.PROJECTS) || '[]');

// ❌ 错误：使用简单键名
localStorage.setItem('projects', ...); // 禁止
localStorage.getItem('projects'); // 禁止
```

### 2. 项目状态规范 - MUST FOLLOW
```javascript
// ✅ 正确：统一使用英文状态
const PROJECT_STATUS = {
  ACTIVE: 'active',
  COMPLETED: 'completed',
  PAUSED: 'paused'
};
{ id: 1, name: '项目1', status: 'active' }

// ❌ 错误：使用中文状态
{ id: 1, name: '项目1', status: '进行中' } // 禁止
```

### 3. JavaScript语法规范 - MUST FOLLOW
```javascript
// ✅ 正确：使用反引号或英文引号
console.log(`✅ 数据加载完成`);
const message = "Hello World";

// ❌ 错误：使用中文引号
console.log(`✅ 数据加载完成"); // 禁止
```

### 4. 全局变量引用规范 - MUST FOLLOW
```javascript
// ✅ 正确：使用window.前缀
if (typeof window.chartManager === 'undefined') {
  console.error('图表管理器未加载');
  return;
}
window.chartManager.updateActivityPieChart(activities);

// ❌ 错误：直接引用
if (typeof chartManager === 'undefined') // 禁止
chartManager.updateActivityPieChart(activities); // 禁止
```

### 5. 数据验证规范 - MUST FOLLOW
```javascript
// ✅ 必须添加数据验证
function validateProjectData(project) {
  if (!project || typeof project !== 'object') {
    throw new Error('Project data must be an object');
  }
  if (!project.id || !project.name) {
    throw new Error('Project must have id and name');
  }
  if (!['active', 'completed', 'paused'].includes(project.status)) {
    throw new Error('Invalid project status');
  }
  return true;
}
```

## 🔧 开发流程规范

### 修改前检查清单
- [ ] 数据键名是否使用统一前缀
- [ ] 项目状态是否使用英文值
- [ ] JavaScript语法是否正确（无中文引号）
- [ ] 全局变量是否使用window.前缀
- [ ] 是否添加了数据验证

### 修改后验证清单
- [ ] 项目选择器是否显示正确数量的项目
- [ ] 界面切换是否正常工作
- [ ] 图表是否正常显示
- [ ] 控制台是否有错误信息
- [ ] 数据是否正确保存和读取

## 开发规范
- 使用现代JavaScript语法
- 遵循响应式设计原则
- 保持代码整洁和注释
- 支持多设备适配

## 功能要求
- 智能活动记录（AI分类）
- 项目进度管理
- 数据统计和分析
- 日记和备忘录
- 响应式UI设计
- 跨平台兼容性

## 代码风格
- 使用有意义的变量名
- 添加必要的注释
- 遵循ES6+语法
- 保持代码简洁

## 项目结构
```
TIME/
├── activity-tracker.html          # 主应用入口
├── demo-activity-tracker.html     # 功能演示页面
├── css/activity-tracker.css       # 样式文件
├── js/                            # JavaScript功能
│   ├── activity-tracker.js        # 活动记录核心
│   ├── project-manager.js         # 项目管理
│   ├── diary-memo.js              # 日记备忘
│   ├── ai-classifier.js           # AI分类器
│   └── app-main.js                # 主应用逻辑
├── time/                          # iOS/macOS项目
└── scripts/                        # 工具脚本
```

## 认证信息自动导入
当检测到 ~/.cxs-auth/ 目录时，自动执行以下操作：

1. **检测认证目录**
   ```bash
   if [ -d ~/.cxs-auth ]; then
     echo "检测到认证目录，开始导入..."
     ./scripts/auto-import-auth.sh
   fi
   ```

2. **导入GitHub认证**
   - 自动设置Git用户名和邮箱
   - 配置GitHub Token
   - 设置远程仓库

3. **导入Netlify认证**
   - 设置环境变量
   - 配置部署信息
   - 启用自动部署

4. **导入其他认证**
   - Vercel认证（可选）
   - Cursor配置
   - 项目特定设置

## 开发原则
- 代码简洁可读
- 功能完整可用
- 性能优化
- 用户体验优先
- 跨平台兼容

## 响应格式
- 提供清晰的代码示例
- 解释实现原理
- 给出优化建议
- 提供测试方法

## 认证信息处理
- 检测到认证目录时自动导入
- 不询问用户确认（静默导入）
- 显示导入状态和结果
- 验证认证信息有效性

## 隐私保护
- 认证信息存储在 ~/.cxs-auth/ 目录
- 该目录不上传Git仓库
- 本地加密存储（可选）
- 自动清理过期Token

## 项目状态
- 当前版本：v2.0.0
- 开发状态：核心功能完成
- 下一步：部署使用或继续开发
- 文档：查看 PROJECT_STATUS.md

## 快速开始
1. 检测认证目录：~/.cxs-auth/
2. 自动导入认证信息
3. 启动开发环境
4. 开始开发或部署

## 注意事项
- 认证信息不上传Git
- 本地开发环境配置
- 跨平台兼容性
- 性能优化考虑

## 📊 数据一致性规范

### 标准项目数据结构
```javascript
const standardProject = {
  id: 'string',           // 唯一标识符
  name: 'string',         // 项目名称
  description: 'string',  // 项目描述
  status: 'active',       // 状态：active/completed/paused
  progress: 0,            // 进度：0-100
  priority: 'medium',     // 优先级：high/medium/low
  startDate: 'ISOString', // 开始日期
  targetDate: 'ISOString' // 目标日期
};
```

### 标准活动数据结构
```javascript
const standardActivity = {
  id: 'string',           // 唯一标识符
  text: 'string',         // 活动描述
  category: 'string',     // 活动分类
  startTime: 'ISOString', // 开始时间
  endTime: 'ISOString',   // 结束时间
  duration: 0,            // 持续时间（分钟）
  project: 'string'       // 关联项目ID
};
```

## 🚨 常见错误预防

### 错误1：数据键名不一致
```javascript
// ❌ 错误
localStorage.setItem('projects', data);
const projects = localStorage.getItem('activityTracker_projects');

// ✅ 正确
localStorage.setItem('activityTracker_projects', data);
const projects = localStorage.getItem('activityTracker_projects');
```

### 错误2：项目状态不统一
```javascript
// ❌ 错误
{ status: '进行中' }
projects.filter(p => p.status === 'active');

// ✅ 正确
{ status: 'active' }
projects.filter(p => p.status === 'active');
```

### 错误3：中文引号语法错误
```javascript
// ❌ 错误
console.log(`数据加载完成");

// ✅ 正确
console.log(`数据加载完成`);
```

### 错误4：全局变量引用错误
```javascript
// ❌ 错误
if (typeof chartManager === 'undefined')

// ✅ 正确
if (typeof window.chartManager === 'undefined')
```

## 🧪 测试规范

### 功能测试清单
- [ ] 项目选择器显示正确的项目数量
- [ ] 项目状态过滤功能正常
- [ ] 活动记录功能正常
- [ ] 数据保存和读取正常
- [ ] 界面切换流畅
- [ ] 图表显示正常
- [ ] 移动端适配正常

### 错误处理规范
```javascript
// ✅ 必须添加错误处理
try {
  const data = JSON.parse(localStorage.getItem('activityTracker_projects') || '[]');
  return data;
} catch (error) {
  console.error('加载项目数据失败:', error);
  return [];
}

// ✅ 必须添加空值检查
const element = document.getElementById('projectSelect');
if (!element) {
  console.error('元素未找到');
  return;
}
```

## 🚀 快速修复指南

### 遇到项目选择器问题时
1. 检查localStorage键名是否一致
2. 检查项目状态是否为'active'
3. 检查数据加载时机是否正确
4. 检查DOM元素是否存在

### 遇到界面切换问题时
1. 检查JavaScript语法错误
2. 检查全局变量引用
3. 检查事件监听器是否正确绑定
4. 检查CSS样式是否正确加载

### 遇到图表显示问题时
1. 检查ECharts是否正确加载
2. 检查图表容器是否存在
3. 检查数据格式是否正确
4. 检查图表初始化时机

---

## 🐛 已解决的历史问题记录

### 问题1：暂停按钮无响应（已解决 ✅）
**问题描述：** 记录界面中的暂停按钮点击后无任何反应
**根本原因：**
- 暂停按钮缺少事件监听器绑定
- 缺少 `pauseActivity()` 和 `resumeActivity()` 方法实现
- UI未根据暂停状态动态更新

**解决方案：**
```javascript
// 1. 在setupEventListeners()中添加事件监听器
const pauseBtn = document.getElementById('pauseActivity');
if (pauseBtn) {
  pauseBtn.addEventListener('click', () => this.handlePauseActivity());
}

// 2. 实现暂停/继续逻辑
handlePauseActivity() {
  if (this.currentActivity.isPaused) {
    this.resumeActivity();
  } else {
    this.pauseActivity();
  }
}

// 3. 暂停时调整时间，排除暂停时长
pauseActivity() {
  this.currentActivity.isPaused = true;
  this.currentActivity.pauseTime = new Date();
  this.stopTimer();
}

resumeActivity() {
  const pauseDuration = new Date() - this.currentActivity.pauseTime;
  this.currentActivity.startTime = new Date(this.currentActivity.startTime.getTime() + pauseDuration);
  this.currentActivity.isPaused = false;
  this.startTimer();
}

// 4. UI动态更新
if (this.currentActivity.isPaused) {
  pauseBtn.textContent = '▶️ 继续';
  pauseBtn.classList.add('btn-resume');
} else {
  pauseBtn.textContent = '⏸️ 暂停';
  pauseBtn.classList.add('btn-pause');
}
```

**预防措施：**
- 所有按钮必须在 `setupEventListeners()` 中绑定事件
- 按钮功能必须有对应的处理方法
- UI状态必须与数据状态同步更新

### 问题2：选项卡超出系统状态栏（已解决 ✅）
**问题描述：** iPhone上滑动时，内容卡片会显示在系统状态栏上方
**根本原因：**
- 缺少 `viewport-fit=cover` 启用iOS安全区域
- 未使用 `env(safe-area-inset-*)` 处理刘海屏/灵动岛
- 导航栏 `z-index` 不够高，被滚动内容覆盖

**解决方案：**
```html
<!-- 1. HTML meta标签 -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
```

```css
/* 2. 内联CSS - 基础安全区域 */
body {
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
}

.navbar {
  padding-top: max(1rem, env(safe-area-inset-top));
  z-index: 1000; /* 确保最高层级 */
}

/* 3. 外部CSS - 完整支持 */
@supports (padding: env(safe-area-inset-top)) {
  .navbar {
    padding-top: max(1rem, env(safe-area-inset-top));
    padding-left: max(2rem, env(safe-area-inset-left));
    padding-right: max(2rem, env(safe-area-inset-right));
    z-index: 1000;
  }

  .page, .container, .project-card {
    position: relative;
    z-index: 1;
  }
}

/* 4. 移动端优化 */
@media (max-width: 768px) {
  @supports (padding: env(safe-area-inset-top)) {
    .navbar {
      padding-top: max(0.75rem, env(safe-area-inset-top));
    }
  }
}
```

**预防措施：**
- 所有iOS/macOS应用必须添加 `viewport-fit=cover`
- 导航栏必须使用 `z-index: 1000` 或更高
- 使用 `@supports` 进行渐进增强
- 移动端必须单独优化安全区域

---

**重要提醒：**
- 每次修改前必须阅读本规范
- 遇到问题时首先检查本规范和历史问题记录
- 定期更新和优化本规范
- 所有开发人员必须遵循本规范
- 新问题解决后必须记录到此处

---

## 🔄 完整验证流程规范 v3.0 - MUST FOLLOW

### 验证闭环流程（强制执行，不可跳过）

**每次提出新的代码解决方案后，必须执行完整的验证流程**

```
┌─────────────────────────────────────────────────────────────┐
│ 验证闭环流程（循环直到成功）                                 │
├─────────────────────────────────────────────────────────────┤
│                                                             │
│ 1️⃣ 设计解决方案                                            │
│    ↓                                                        │
│ 2️⃣ 编译验证                                                │
│    ├─ ✅ 通过 → 继续                                       │
│    └─ ❌ 失败 → 🔄 重新设计 → 回到步骤1                   │
│    ↓                                                        │
│ 3️⃣ 仿真测试                                                │
│    ├─ ✅ 通过 → 继续                                       │
│    └─ ❌ 失败 → 🔄 重新设计 → 回到步骤1                   │
│    ↓                                                        │
│ 4️⃣ 全局影响分析                                            │
│    ├─ ✅ 无影响 → 继续                                     │
│    └─ ❌ 有影响 → 🔄 重新设计 → 回到步骤1                 │
│    ↓                                                        │
│ 5️⃣ 提交给用户                                              │
│                                                             │
└─────────────────────────────────────────────────────────────┘
```

### 步骤详解

#### 0️⃣ 环境依赖预检查（前置步骤）

**在开始验证前确保所有必要的运行环境已就绪**

```bash
# 检测清单
- Homebrew (macOS包管理器)
- Git (版本控制)
- Xcode (iOS/macOS开发)
- Node.js/npm (如需要)
- Python (如需要)
- 数据库 (如需要)
```

**如果缺失依赖**：
- 🤖 **自动修复**：尝试自动安装（需要network权限）
- 📋 **提供指令**：给出详细安装步骤
- ✅ **验证安装**：安装后确认可用
- 🔄 **重新验证**：继续原验证流程

#### 2️⃣ 编译验证（必须）

```bash
# 对于 iOS/macOS 项目
xcodebuild -scheme TIME -destination 'platform=macOS' build
xcodebuild -scheme TIME -destination 'platform=iOS Simulator,name=iPhone 17' build

# 对于 Web 项目
npm run build  # 或其他构建命令

# 验证点
✅ 无编译错误
✅ 无新增警告
✅ 所有文件正确加载
```

**如果编译失败**：
- 🔍 分析错误信息
- 🔄 重新设计解决方案
- ✅ 再次编译验证

#### 3️⃣ 仿真测试（必须）

```bash
# 自动运行仿真
sleep 10 && cd /Users/shanwanjun/Desktop/cxs/time/time && echo "3" | ./run-simulation.sh

# 验证点
✅ Mac 应用启动成功
✅ iPhone 应用安装成功
✅ 修改的功能正常工作
✅ 无控制台错误
```

#### 4️⃣ 全局影响分析（必须）

**检查清单**：

```markdown
CSS 检查：
- [ ] 是否有同名 class/id 冲突？
- [ ] 是否有 CSS 优先级覆盖问题？
- [ ] 是否影响其他页面样式？
- [ ] 动画名称是否冲突？

JavaScript 检查：
- [ ] 全局变量是否冲突？
- [ ] 函数名是否重复？
- [ ] 事件监听器是否重复绑定？
- [ ] 是否影响其他模块？

数据检查：
- [ ] localStorage 键名是否冲突？
- [ ] 数据结构是否兼容？
- [ ] 是否需要数据迁移？

功能检查：
- [ ] 是否破坏现有功能？
- [ ] 是否需要更新文档？
- [ ] 是否需要更新测试？
```

**如果发现影响**：
- 🔄 重新设计，避免冲突
- 📝 更新相关文档
- ✅ 再次进行全流程验证

---

## 📚 解决方案知识库系统

### 知识库架构

```
~/.cursor-knowledge-base/          # 全局知识库
├── solutions/                     # 解决方案
│   ├── by-category/              # 按类别
│   │   ├── event-binding/        # 事件绑定问题
│   │   ├── initialization/       # 初始化问题
│   │   ├── data-storage/         # 数据存储问题
│   │   ├── ui-rendering/         # UI渲染问题
│   │   ├── performance/          # 性能优化
│   │   ├── cross-platform/       # 跨平台兼容
│   │   ├── security/             # 安全问题
│   │   ├── networking/           # 网络请求
│   │   ├── state-management/     # 状态管理
│   │   └── error-handling/       # 错误处理
│   ├── by-priority/              # 按优先级
│   │   ├── critical/             # 严重问题
│   │   ├── high/                 # 高优先级
│   │   └── medium/               # 中优先级
│   └── by-date/                  # 按日期
│       └── 2025-10/
├── patterns/                      # 设计模式
├── statistics/                    # 统计数据
│   └── solution-stats.json       # 解决方案统计
└── exports/                       # 导出文件
    ├── markdown/                 # Markdown格式
    └── pdf/                      # PDF格式
```

### 解决方案数据结构

```json
{
  "id": "solution-001",
  "title": "自定义分类按钮无响应问题",
  "category": "event-binding",
  "priority": "high",
  "created_at": "2025-10-26T07:00:00Z",
  "problem": {
    "description": "记录界面中的「+ 自定义」按钮点击无反应",
    "symptoms": [
      "点击按钮无任何响应",
      "控制台无错误信息",
      "按钮样式正常"
    ],
    "affected_platforms": ["iOS", "macOS", "Web"]
  },
  "diagnosis": {
    "root_cause": "SmartActivityTracker 未在 app-main.js 中统一初始化",
    "analysis": [
      "activity-tracker.js 使用局部变量创建实例",
      "app-main.js 未初始化 window.smartActivityTracker",
      "导致事件监听器绑定时 DOM 未准备好"
    ]
  },
  "solution": {
    "approach": "暴露类到 window，在 DOMContentLoaded 中统一初始化",
    "changes": [
      {
        "file": "activity-tracker.js",
        "line": 610,
        "change": "移除局部实例，改为暴露类"
      },
      {
        "file": "app-main.js",
        "lines": "1815-1821",
        "change": "添加 SmartActivityTracker 初始化"
      }
    ],
    "code_snippets": {
      "before": "const smartActivityTracker = new SmartActivityTracker();",
      "after": "window.SmartActivityTracker = SmartActivityTracker;"
    }
  },
  "verification": {
    "tested": true,
    "test_date": "2025-10-26",
    "platforms_tested": ["macOS", "iOS"],
    "result": "success",
    "notes": "编译成功，仿真运行正常，待用户确认功能"
  },
  "metadata": {
    "success_count": 1,
    "last_used": "2025-10-26",
    "tags": ["event-binding", "initialization", "dom-ready"],
    "related_issues": ["暂停按钮无响应"],
    "prevention": [
      "所有管理器类必须在 app-main.js 统一初始化",
      "确保 DOM 加载完成后再绑定事件",
      "使用 window 对象暴露全局实例"
    ]
  }
}
```

### 自动记录规则

**触发条件**（满足任一即记录）：
1. 用户明确说"已解决"、"功能正常"、"没问题了"
2. 修改后30秒内无新问题反馈
3. 用户开始新的任务/话题

**记录内容**：
- 问题完整描述
- 诊断过程
- 解决方案（含代码）
- 验证结果
- 预防措施

**下次遇到类似问题时**：
1. 🔍 自动检索知识库
2. 📊 匹配相似度 > 70% 的方案
3. ✅ 优先使用已验证的方案
4. 🎯 如成功，增加成功计数

---

## 🌍 跨平台一致性验证

### 支持平台清单

```
✅ 已支持平台：
  • iOS (原生 SwiftUI)
  • macOS (原生 SwiftUI)
  • Web (HTML5/CSS3/JS)

🔄 规划中平台：
  • Android (React Native / Flutter)
  • HarmonyOS 鸿蒙 (ArkTS / JS)
  • Web Progressive App (PWA)
  • 微信小程序
  • 支付宝小程序

🎯 跨平台兼容性目标：
  • 功能一致性：100%
  • UI一致性：90%以上
  • 数据同步：实时
  • 性能差异：<10%
```

### 平台验证矩阵

| 功能 | iOS | macOS | Web | Android | HarmonyOS |
|-----|-----|-------|-----|---------|-----------|
| 活动记录 | ✅ | ✅ | ✅ | 🔄 | 🔄 |
| 项目管理 | ✅ | ✅ | ✅ | 🔄 | 🔄 |
| 数据统计 | ✅ | ✅ | ✅ | 🔄 | 🔄 |
| 自定义分类 | ✅ | ✅ | ✅ | 🔄 | 🔄 |
| 安全区域 | ✅ | ✅ | N/A | 🔄 | 🔄 |

### 平台特定适配

```javascript
// 平台检测
const platform = {
  isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent),
  isMacOS: /Macintosh/.test(navigator.userAgent),
  isAndroid: /Android/.test(navigator.userAgent),
  isHarmonyOS: /HarmonyOS/.test(navigator.userAgent),
  isWeb: !window.webkit && !window.Android
};

// 平台特定处理
if (platform.isIOS || platform.isMacOS) {
  // 处理安全区域
  document.documentElement.style.setProperty(
    '--safe-area-top',
    'env(safe-area-inset-top)'
  );
}
```

---

## 💾 文档同步与备份机制

### 备份策略

**重大修改前自动备份**：

```bash
# 备份命名规则
backups/history-v{版本号}-{时间戳}/

# 示例
backups/
├── history-v2.2.0-20251025-160000/
├── history-v2.3.0-20251026-070000/
└── history-v2.4.0-20251026-120000/
```

**触发条件**：
- 修改超过 100 行代码
- 重构核心模块
- 数据结构变更
- 用户明确要求

**备份内容**：
- 完整源代码
- .cursorrules 文件
- 配置文件
- Git 提交记录

**执行命令**：
```bash
# 创建备份
VERSION="v2.4.0"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_DIR="backups/history-${VERSION}-${TIMESTAMP}"
mkdir -p "$BACKUP_DIR"
rsync -av --exclude='node_modules' --exclude='.git' \
      ./ "$BACKUP_DIR/"
git log --oneline -n 20 > "$BACKUP_DIR/git-history.txt"
```

### Git 版本标记

**重要版本必须打 Tag**：

```bash
# 标记版本
git tag -a v2.4.0 -m "功能: 完善验证流程和知识库系统"
git push origin v2.4.0

# 版本号规则
v{主版本}.{次版本}.{修订版本}

主版本：重大架构变更
次版本：新功能添加
修订版本：Bug修复
```

---

## 📦 分步骤开发的Git快照规则 - MUST FOLLOW

### 适用场景

当用户明确要求以下情况时，必须执行本规则：
- "分步骤实施"
- "一步一步来"
- "每步验证"
- "逐步完成"
- "一个步骤一个步骤地进行"

### 强制执行流程

```
┌─────────────────────────────────────────────────────────────┐
│ 分步骤开发流程（每步独立提交）                               │
├─────────────────────────────────────────────────────────────┤
│                                                             │
│ Step 1: 实施功能                                            │
│    ↓                                                        │
│ 立即 git commit                                             │
│    ↓                                                        │
│ 运行仿真验证                                                │
│    ↓                                                        │
│ 等待用户确认                                                │
│    ├─ "功能正常" / "继续" → Step 2                        │
│    ├─ "撤回" / "不采用" → git reset HEAD~1               │
│    └─ "有问题" → 修复后重新commit                         │
│                                                             │
└─────────────────────────────────────────────────────────────┘
```

### 每步完成后的必须操作

#### 1️⃣ 立即创建Git提交

```bash
# 添加所有修改
git add .

# 创建提交（使用清晰的描述）
git commit -m "Step X: [功能描述] - 待用户验证"

# 示例
git commit -m "Step 1: 界面设计改动-主题切换和UI尺寸配置 - 待用户验证"
```

#### 2️⃣ 运行仿真验证

按照自动仿真规则执行：
```bash
sleep 10 && cd /Users/shanwanjun/Desktop/cxs/time/time && echo "3" | ./run-simulation.sh
```

#### 3️⃣ 等待用户明确确认

**必须等待用户回复以下之一才能继续：**

✅ **确认继续的回复：**
- "功能正常"
- "继续"
- "进入下一步"
- "没问题"
- "OK"

❌ **要求撤回的回复：**
- "撤回"
- "不采用"
- "回退"
- "不想要这个"

🔧 **需要修复的回复：**
- "有问题"
- "不对"
- "需要修改"

### 撤回操作详解

#### 撤回最后一步（保留文件）

```bash
# 撤销最后一次提交，但保留文件修改
git reset --soft HEAD~1

# 此时文件修改还在，可以继续调整
```

#### 撤回最后一步（删除文件修改）

```bash
# 完全撤销最后一次提交，包括文件修改
git reset --hard HEAD~1

# 代码回到上一步的状态
```

#### 撤回多步

```bash
# 撤回最近N步
git reset --hard HEAD~N

# 示例：撤回最近2步
git reset --hard HEAD~2
```

### 查看提交历史

```bash
# 查看最近的提交
git log --oneline -10

# 查看详细的提交历史（包括已撤回的）
git reflog

# 恢复误删的提交
git reset --hard <commit-hash>
```

### 完整示例流程

```bash
# 基础版本：v2.5.0
git log
# dd034b4 ✅ 日记界面完全修复

# === Step 1 开始 ===
# 实施界面设计改动...
git add .
git commit -m "Step 1: 界面设计改动-主题切换和UI尺寸配置 - 待用户验证"
# 运行仿真...
# 提交给用户...

# 用户回复："功能正常"
# === Step 1 完成，进入 Step 2 ===

# 实施移动端优化...
git add .
git commit -m "Step 2: 移动端优化-安全区域和防缩放 - 待用户验证"
# 运行仿真...
# 提交给用户...

# 用户回复："撤回"
git reset --hard HEAD~1  # 回到Step 1完成的状态
# === 当前状态：只有Step 1的修改 ===
```

### 关键原则

1. ✅ **每步必须commit** - 不管步骤大小
2. ✅ **每步必须仿真** - 确保编译通过
3. ✅ **每步必须等待** - 不能自动进入下一步
4. ✅ **撤回要精确** - 只撤回用户不要的步骤
5. ❌ **不能合并步骤** - 严格一步一提交

### 与自动仿真规则的配合

本规则是自动仿真规则的补充：
- 自动仿真规则：确保每次修改后运行仿真
- 本规则：确保每步可以独立撤回

### 冲突处理

如果用户要求"撤回"，但没有创建Git提交：
1. 🔍 检查是否有未提交的修改
2. 📋 询问用户："是否回退到上一个稳定版本(vX.X.X)？"
3. ✅ 获得确认后再执行回退

---

**最后更新：** 2025年10月27日
**版本：** v3.1.0
**状态：** ✅ 生效中（新增：分步骤Git快照规则）
