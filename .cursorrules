# Cursor AI 助手配置 - Activity Tracker 项目

## 项目类型
这是一个智能活动记录与进度管理系统，包含Web版本和原生iOS/macOS应用。

## 技术栈
- 前端：HTML5, CSS3, JavaScript ES6+
- 原生：SwiftUI (iOS/macOS)
- 数据：LocalStorage, ECharts
- 工具：Git, Xcode, Cursor

## 🚀 自动化工作流程

### 自动仿真规则 - MUST FOLLOW
**每次Cursor完成代码修改后，必须自动运行仿真验证**

```bash
# 标准流程：
1. 完成代码修改
2. 等待10秒（确保文件保存完成）
3. 自动运行Mac和iPhone仿真
4. 显示验证清单

# 执行命令：
sleep 10 && cd /Users/shanwanjun/Desktop/cxs/time/time && echo "3" | ./run-simulation.sh
```

**例外情况（不运行仿真）：**
- 仅修改文档文件（*.md）
- 仅修改配置文件（.cursorrules, .gitignore等）
- 用户明确说明"不要运行仿真"
- 仅进行Git操作（commit, tag等）

**仿真验证要点：**
- 检查编译是否成功
- 检查应用是否正常启动
- 检查控制台是否有错误
- 提醒用户验证修改的功能

## 🚨 关键开发规范（避免错误）

### 1. 数据存储规范 - MUST FOLLOW
```javascript
// ✅ 正确：统一使用前缀键名
const STORAGE_KEYS = {
  ACTIVITIES: 'activityTracker_activities',
  PROJECTS: 'activityTracker_projects',
  DIARY: 'activityTracker_diary',
  MEMOS: 'activityTracker_memos'
};
localStorage.setItem(STORAGE_KEYS.PROJECTS, JSON.stringify(projects));
const projects = JSON.parse(localStorage.getItem(STORAGE_KEYS.PROJECTS) || '[]');

// ❌ 错误：使用简单键名
localStorage.setItem('projects', ...); // 禁止
localStorage.getItem('projects'); // 禁止
```

### 2. 项目状态规范 - MUST FOLLOW
```javascript
// ✅ 正确：统一使用英文状态
const PROJECT_STATUS = {
  ACTIVE: 'active',
  COMPLETED: 'completed',
  PAUSED: 'paused'
};
{ id: 1, name: '项目1', status: 'active' }

// ❌ 错误：使用中文状态
{ id: 1, name: '项目1', status: '进行中' } // 禁止
```

### 3. JavaScript语法规范 - MUST FOLLOW
```javascript
// ✅ 正确：使用反引号或英文引号
console.log(`✅ 数据加载完成`);
const message = "Hello World";

// ❌ 错误：使用中文引号
console.log(`✅ 数据加载完成"); // 禁止
```

### 4. 全局变量引用规范 - MUST FOLLOW
```javascript
// ✅ 正确：使用window.前缀
if (typeof window.chartManager === 'undefined') {
  console.error('图表管理器未加载');
  return;
}
window.chartManager.updateActivityPieChart(activities);

// ❌ 错误：直接引用
if (typeof chartManager === 'undefined') // 禁止
chartManager.updateActivityPieChart(activities); // 禁止
```

### 5. 数据验证规范 - MUST FOLLOW
```javascript
// ✅ 必须添加数据验证
function validateProjectData(project) {
  if (!project || typeof project !== 'object') {
    throw new Error('Project data must be an object');
  }
  if (!project.id || !project.name) {
    throw new Error('Project must have id and name');
  }
  if (!['active', 'completed', 'paused'].includes(project.status)) {
    throw new Error('Invalid project status');
  }
  return true;
}
```

## 🔧 开发流程规范

### 修改前检查清单
- [ ] 数据键名是否使用统一前缀
- [ ] 项目状态是否使用英文值
- [ ] JavaScript语法是否正确（无中文引号）
- [ ] 全局变量是否使用window.前缀
- [ ] 是否添加了数据验证

### 修改后验证清单
- [ ] 项目选择器是否显示正确数量的项目
- [ ] 界面切换是否正常工作
- [ ] 图表是否正常显示
- [ ] 控制台是否有错误信息
- [ ] 数据是否正确保存和读取

## 开发规范
- 使用现代JavaScript语法
- 遵循响应式设计原则
- 保持代码整洁和注释
- 支持多设备适配

## 功能要求
- 智能活动记录（AI分类）
- 项目进度管理
- 数据统计和分析
- 日记和备忘录
- 响应式UI设计
- 跨平台兼容性

## 代码风格
- 使用有意义的变量名
- 添加必要的注释
- 遵循ES6+语法
- 保持代码简洁

## 项目结构
```
TIME/
├── activity-tracker.html          # 主应用入口
├── demo-activity-tracker.html     # 功能演示页面
├── css/activity-tracker.css       # 样式文件
├── js/                            # JavaScript功能
│   ├── activity-tracker.js        # 活动记录核心
│   ├── project-manager.js         # 项目管理
│   ├── diary-memo.js              # 日记备忘
│   ├── ai-classifier.js           # AI分类器
│   └── app-main.js                # 主应用逻辑
├── time/                          # iOS/macOS项目
└── scripts/                        # 工具脚本
```

## 认证信息自动导入
当检测到 ~/.cxs-auth/ 目录时，自动执行以下操作：

1. **检测认证目录**
   ```bash
   if [ -d ~/.cxs-auth ]; then
     echo "检测到认证目录，开始导入..."
     ./scripts/auto-import-auth.sh
   fi
   ```

2. **导入GitHub认证**
   - 自动设置Git用户名和邮箱
   - 配置GitHub Token
   - 设置远程仓库

3. **导入Netlify认证**
   - 设置环境变量
   - 配置部署信息
   - 启用自动部署

4. **导入其他认证**
   - Vercel认证（可选）
   - Cursor配置
   - 项目特定设置

## 开发原则
- 代码简洁可读
- 功能完整可用
- 性能优化
- 用户体验优先
- 跨平台兼容

## 响应格式
- 提供清晰的代码示例
- 解释实现原理
- 给出优化建议
- 提供测试方法

## 认证信息处理
- 检测到认证目录时自动导入
- 不询问用户确认（静默导入）
- 显示导入状态和结果
- 验证认证信息有效性

## 隐私保护
- 认证信息存储在 ~/.cxs-auth/ 目录
- 该目录不上传Git仓库
- 本地加密存储（可选）
- 自动清理过期Token

## 项目状态
- 当前版本：v2.0.0
- 开发状态：核心功能完成
- 下一步：部署使用或继续开发
- 文档：查看 PROJECT_STATUS.md

## 快速开始
1. 检测认证目录：~/.cxs-auth/
2. 自动导入认证信息
3. 启动开发环境
4. 开始开发或部署

## 注意事项
- 认证信息不上传Git
- 本地开发环境配置
- 跨平台兼容性
- 性能优化考虑

## 📊 数据一致性规范

### 标准项目数据结构
```javascript
const standardProject = {
  id: 'string',           // 唯一标识符
  name: 'string',         // 项目名称
  description: 'string',  // 项目描述
  status: 'active',       // 状态：active/completed/paused
  progress: 0,            // 进度：0-100
  priority: 'medium',     // 优先级：high/medium/low
  startDate: 'ISOString', // 开始日期
  targetDate: 'ISOString' // 目标日期
};
```

### 标准活动数据结构
```javascript
const standardActivity = {
  id: 'string',           // 唯一标识符
  text: 'string',         // 活动描述
  category: 'string',     // 活动分类
  startTime: 'ISOString', // 开始时间
  endTime: 'ISOString',   // 结束时间
  duration: 0,            // 持续时间（分钟）
  project: 'string'       // 关联项目ID
};
```

## 🚨 常见错误预防

### 错误1：数据键名不一致
```javascript
// ❌ 错误
localStorage.setItem('projects', data);
const projects = localStorage.getItem('activityTracker_projects');

// ✅ 正确
localStorage.setItem('activityTracker_projects', data);
const projects = localStorage.getItem('activityTracker_projects');
```

### 错误2：项目状态不统一
```javascript
// ❌ 错误
{ status: '进行中' }
projects.filter(p => p.status === 'active');

// ✅ 正确
{ status: 'active' }
projects.filter(p => p.status === 'active');
```

### 错误3：中文引号语法错误
```javascript
// ❌ 错误
console.log(`数据加载完成");

// ✅ 正确
console.log(`数据加载完成`);
```

### 错误4：全局变量引用错误
```javascript
// ❌ 错误
if (typeof chartManager === 'undefined')

// ✅ 正确
if (typeof window.chartManager === 'undefined')
```

## 🧪 测试规范

### 功能测试清单
- [ ] 项目选择器显示正确的项目数量
- [ ] 项目状态过滤功能正常
- [ ] 活动记录功能正常
- [ ] 数据保存和读取正常
- [ ] 界面切换流畅
- [ ] 图表显示正常
- [ ] 移动端适配正常

### 错误处理规范
```javascript
// ✅ 必须添加错误处理
try {
  const data = JSON.parse(localStorage.getItem('activityTracker_projects') || '[]');
  return data;
} catch (error) {
  console.error('加载项目数据失败:', error);
  return [];
}

// ✅ 必须添加空值检查
const element = document.getElementById('projectSelect');
if (!element) {
  console.error('元素未找到');
  return;
}
```

## 🚀 快速修复指南

### 遇到项目选择器问题时
1. 检查localStorage键名是否一致
2. 检查项目状态是否为'active'
3. 检查数据加载时机是否正确
4. 检查DOM元素是否存在

### 遇到界面切换问题时
1. 检查JavaScript语法错误
2. 检查全局变量引用
3. 检查事件监听器是否正确绑定
4. 检查CSS样式是否正确加载

### 遇到图表显示问题时
1. 检查ECharts是否正确加载
2. 检查图表容器是否存在
3. 检查数据格式是否正确
4. 检查图表初始化时机

---

## 🐛 已解决的历史问题记录

### 问题1：暂停按钮无响应（已解决 ✅）
**问题描述：** 记录界面中的暂停按钮点击后无任何反应
**根本原因：**
- 暂停按钮缺少事件监听器绑定
- 缺少 `pauseActivity()` 和 `resumeActivity()` 方法实现
- UI未根据暂停状态动态更新

**解决方案：**
```javascript
// 1. 在setupEventListeners()中添加事件监听器
const pauseBtn = document.getElementById('pauseActivity');
if (pauseBtn) {
  pauseBtn.addEventListener('click', () => this.handlePauseActivity());
}

// 2. 实现暂停/继续逻辑
handlePauseActivity() {
  if (this.currentActivity.isPaused) {
    this.resumeActivity();
  } else {
    this.pauseActivity();
  }
}

// 3. 暂停时调整时间，排除暂停时长
pauseActivity() {
  this.currentActivity.isPaused = true;
  this.currentActivity.pauseTime = new Date();
  this.stopTimer();
}

resumeActivity() {
  const pauseDuration = new Date() - this.currentActivity.pauseTime;
  this.currentActivity.startTime = new Date(this.currentActivity.startTime.getTime() + pauseDuration);
  this.currentActivity.isPaused = false;
  this.startTimer();
}

// 4. UI动态更新
if (this.currentActivity.isPaused) {
  pauseBtn.textContent = '▶️ 继续';
  pauseBtn.classList.add('btn-resume');
} else {
  pauseBtn.textContent = '⏸️ 暂停';
  pauseBtn.classList.add('btn-pause');
}
```

**预防措施：**
- 所有按钮必须在 `setupEventListeners()` 中绑定事件
- 按钮功能必须有对应的处理方法
- UI状态必须与数据状态同步更新

### 问题2：选项卡超出系统状态栏（已解决 ✅）
**问题描述：** iPhone上滑动时，内容卡片会显示在系统状态栏上方
**根本原因：**
- 缺少 `viewport-fit=cover` 启用iOS安全区域
- 未使用 `env(safe-area-inset-*)` 处理刘海屏/灵动岛
- 导航栏 `z-index` 不够高，被滚动内容覆盖

**解决方案：**
```html
<!-- 1. HTML meta标签 -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
```

```css
/* 2. 内联CSS - 基础安全区域 */
body {
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
}

.navbar {
  padding-top: max(1rem, env(safe-area-inset-top));
  z-index: 1000; /* 确保最高层级 */
}

/* 3. 外部CSS - 完整支持 */
@supports (padding: env(safe-area-inset-top)) {
  .navbar {
    padding-top: max(1rem, env(safe-area-inset-top));
    padding-left: max(2rem, env(safe-area-inset-left));
    padding-right: max(2rem, env(safe-area-inset-right));
    z-index: 1000;
  }

  .page, .container, .project-card {
    position: relative;
    z-index: 1;
  }
}

/* 4. 移动端优化 */
@media (max-width: 768px) {
  @supports (padding: env(safe-area-inset-top)) {
    .navbar {
      padding-top: max(0.75rem, env(safe-area-inset-top));
    }
  }
}
```

**预防措施：**
- 所有iOS/macOS应用必须添加 `viewport-fit=cover`
- 导航栏必须使用 `z-index: 1000` 或更高
- 使用 `@supports` 进行渐进增强
- 移动端必须单独优化安全区域

---

**重要提醒：**
- 每次修改前必须阅读本规范
- 遇到问题时首先检查本规范和历史问题记录
- 定期更新和优化本规范
- 所有开发人员必须遵循本规范
- 新问题解决后必须记录到此处

**最后更新：** 2025年10月25日
**版本：** v2.2.0
**状态：** ✅ 生效中
